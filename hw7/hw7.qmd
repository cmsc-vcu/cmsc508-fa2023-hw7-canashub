---
title: Homework 7 - Creating a resume database
author: Corbin Nash
date: 11-10-2023
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This document outlines a database for a company wide resume.

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-canashub>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

The project is a company wide resume highlighting the skills for each employee as well as future desired skills. The database has 3 main tables: people, skills, and roles. The people table provides some info on each employee, the skills table describes each skill as well as how long it takes to acquire them, and the roles table describes each role within the company.

## Crows-foot diagram

Here is an ER diagram displaying the relationships between the major tables. People to roles is a 0 or many to 1 or many relationship as eacch employee needs at least one role, but a role may not necessarily be filled. People to skills is a 0 or many to 0 or many as an employee may have none of the listed skills, and none of the employees in the company may have a certain skill.

```{mermaid}
erDiagram
    People }o--|{ Roles : is
    People }o--o{ Skills : has
    People{
        int id
        string first_name
        string last_name
        string email
        string linkedin_url
        string discord_handle
        string bio
        date date_joined

    }
    Roles{
        int id
        string name
        int sortpriority
    }
    Skills{
        int id
        string name
        string description
        string tag
        string url
        int time
    }
```

## Examples of data in the database


### People table

The *people* table contains elements that describe each employee and relevant information to their job. It contains information such as their name, hiring date, email, and linkedin account.

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe the desired skills found in our company, as well as some we are working on teaching our employees. It provides information such as a brief description for each skill, the time required to master it, as well as potentially a link to where you can get more info on the skill. 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe certain roles within our company. it contains a title of each role as well as a number representing their sorting priority.

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true

## Add code to list roles table here
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name



```{python}
#| echo: false
#| eval: true
sql = f"""
select skills_name, skills_tag, skills_description from skills
order by skills_name asc;
"""
```

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name
```{python}
#| echo: false
#| eval: true
sql = f"""
select people_last_name, people_first_name, people_email from people
order by ABS(people_last_name);
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List skill names of Person 1
```{python}
#| echo: false
#| eval: true
sql = f"""
select people_last_name, people_first_name from people
left join peopleskills
on people.people_id = peopleskills.people_id
left join skills
on peopleskills.skills_id = skills.skills_id
where people.people_id = 1;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names with Skill 6
```{python}
#| echo: false
#| eval: true
sql = f"""
select people_first_name, people_last_name from people
right join peopleskills
on people.people_id = peopleskills.people_id
where peopleskills.skills_id = 6;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people with a DEVELOPER role
```{python}
#| echo: false
#| eval: true
sql = f"""
select roles_name, people.people_last_name, people.people_first_name from roles
left join peopleroles
on roles.roles_id = peopleroles.role_id
left join people
on peopleroles.people_id = people.people_id
where roles.roles_id = 2;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and email addresses of people without skills
```{python}
#| echo: false
#| eval: true
sql = f"""
select people_last_name, people_first_name, people_email from people
left join peopleskills
on people.people_id = peopleskills.people_id
where peopleskills.people_id is null;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills
```{python}
#| echo: false
#| eval: true
sql = f"""
select skills_name, skills_tag from skills
left join peopleskills
on skills.skills_id = peopleskills.skills_id
where peopleskills.skills_id is null;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and skill names with the BOSS role
```{python}
#| echo: false
#| eval: true
sql = f"""
select people_last_name, people_first_name, people_email, skills.skills_name from people
left join peopleroles
on people.people_id = peopleroles.people_id
left join peopleskills
on people.people_id = peopleskills.people_id
left join skills
on peopleskills.skills_id = skills.skills_id
where peopleroles.role_id = 5;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List ids and names of unused roles
```{python}
#| echo: false
#| eval: true
sql = f"""
select roles_id, roles_name from roles
left join peopleroles
on roles.roles_id = peopleroles.role_id
where peopleroles.role_id is null
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection

When writing the quarto document, I was frustrated at first because I was rendering it each time in order to test my SQL queries. Once I figured out you can run queries directly on PHPmyadmin in order to test, my workflow become much better. Beyond that, this projecct went fairly smoothly for me. 

